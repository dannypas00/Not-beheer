version: 2.1
jobs:
  pull-and-build:
    docker:
      - image: arvindr226/alpine-ssh
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "66:eb:41:94:f3:6c:60:9c:29:0c:e6:14:61:12:f1:41"
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "./deploy.sh"
  build:
    docker:
      # Specify the version you desire here
      - image: php:8.0-alpine

    steps:
      - checkout
      - run:
          name: "Prepare dependencies"
          command: |
            apk add libzip-dev
      - run:
          name: "Prepare Environment"
          command: |
            docker-php-ext-install zip
      - run:
          name: "Create Environment file"
          command: |
            cp .env.testing.example .env
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "Install composer"
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php --install-dir=. --filename=composer
            php -r "unlink('composer-setup.php');"
      - run:
          name: "Install Dependencies"
          command: ./composer install -n --prefer-dist
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - run:
          name: "Generate App key"
          command: php artisan key:generate
      - persist_to_workspace:
          root: .
          paths:
            - .
  test-unit:
    docker:
      - image: php:8.0-alpine
    steps:
      - attach_workspace:
          at: /root/project
      - run:
          name: "Run Unit Tests"
          command: ./composer run unit
  test-feature:
    docker:
      - image: php:8.0-alpine
    steps:
      - attach_workspace:
          at: /root/project
      - run:
          name: "Run Feature Tests"
          command: ./composer run feature
  test-static:
    docker:
      - image: php:8.0-alpine
    steps:
      - attach_workspace:
          at: /root/project
      - run:
          name: "Run Static Tests"
          command: |
            php vendor/bin/php-cs-fixer fix --dry-run app
            php vendor/bin/php-cs-fixer fix --dry-run tests
            php vendor/bin/phpstan analyse

workflows:
  test-push:
    jobs:
      - build
      - test-unit:
          requires:
            - build
      - test-feature:
          requires:
            - build
      - test-static:
          requires:
            - build
  deploy:
    jobs:
      - pull-and-build:
          filters:
            branches:
              only:
                - master
